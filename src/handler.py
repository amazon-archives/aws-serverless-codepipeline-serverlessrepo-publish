"""Lambda function handler."""

# must be the first import in files with lambda function handlers
import lambdainit  # noqa: F401
import lambdalogging

import boto3
import serverlessrepo

LOG = lambdalogging.getLogger(__name__)

S3 = boto3.client('s3')
CODEPIPELINE = boto3.client('codepipeline')


def publish(event, context):
    """Publish to AWS Serverless Application Repository.

    CodePipeline invokes the lambda to publish an application
    to AWS Serverless Application Repository. If the application
    already exists, it will update the application metadata. Besides,
    it will create an application version if SemanticVersion is specified
    in the Metadata section of the packaged template.

    Arguments:
        event {dict} -- The JSON event sent to AWS Lambda by AWS CodePipeline
        context {LambdaContext} -- The context passed by AWS Lambda
    """
    LOG.info('CodePipeline publish to SAR request={}', event)

    job_id = event['CodePipeline.job']['id']
    packaged_template_str = _get_input_artifact(event)

    try:
        LOG.info('Making API calls to AWS Serverless Application Repository...')
        sar_response = serverlessrepo.publish_application(packaged_template_str)
        _put_job_success(job_id, sar_response)
    except Exception as e:
        _put_job_failure(job_id, e)


def _get_input_artifact(event):
    """Get the packaged SAM template from CodePipeline S3 Bucket.

    Arguments:
        event {dict} -- The JSON event sent to AWS Lambda by AWS CodePipeline

    Returns:
        str -- The content in the packaged SAM template as string

    """
    input_artifact_s3_location = event['CodePipeline.job']['data']['inputArtifacts'][0]['location']['s3Location']
    bucket = input_artifact_s3_location['bucketName']
    key = input_artifact_s3_location['objectKey']

    response = S3.get_object(Bucket=bucket, Key=key)
    # LOG.info('{}/{} fetched. {} bytes.', bucket, key, response['ContentLength'])
    return response.get('Body').read().decode(response['ContentLength'])


def _put_job_success(job_id, sar_response):
    """Notify AWS CodePipeline of a successful job.

    Arguments:
        job_id {str} -- The unique ID for the job generated by AWS CodePipeline
        sar_response {dict} -- The result from invoking serverlessrepo.publish_application()
    """
    LOG.info('Putting job success result...')
    CODEPIPELINE.put_job_success_result(
        jobId=job_id,
        executionDetails={
            'summary': str(sar_response),
            'percentComplete': 100
        }
    )


def _put_job_failure(job_id, e):
    """Notify AWS CodePipeline of a failed job.

    Arguments:
        job_id {str} -- The unique ID for the job generated by AWS CodePipeline
        e {Exception} -- The exception from invoking serverlessrepo.publish_application()
    """
    LOG.info('Putting job failure result...')
    CODEPIPELINE.put_job_failure_result(
        jobId=job_id,
        failureDetails={
            'type': 'JobFailed',
            'message': str(e)
        }
    )
